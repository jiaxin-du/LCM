//-----------------------------------------------------
//     LCM parameter configuration file
//
// Citation: 
//   Du J, Vegh V, Reutens DC (2012) 
//              PLoS Comput Biol 8(10): e102733
//              NeuroImage 94: 1-11
//-----------------------------------------------------
//
// Formats:
// 1. comments: use C++-style comments. Any content after "//"
//   until the end of the line will be ignored.
//
// 2. Specify the value of parameters using the following format
//       name_of_parameter = value;
//   the semicolon is mandatory.
//
// 3. Parameter name and value is case insensitive.
//
// 4. All parameters must start with one of the following prefix
//     "LCM", "LAYER", "NEURON", "STIM", "SOURCE", "SYNAPSE", "RECEPTOR"
//
// 5. Parameters of the same object can be grouped, for example
//   Neuron.E1 {
//     Para1 = 111;
//     Para2 = 2222;
//   };
//
//   is equivalent to
//
//   Neuron.E1.Para1 = 111;
//   Neuron.E1.Para2 = 222;
//   
//   the ";" after the "}" is mandatory.
//
// 6. There is a special object named "global" in each class. The "global" 
//   indicator represents all objects in the class. For example,
//     Neuron.global.para1 = 111;
//   will set "para1" of all neuron groups to 111.
//
// 7. The names of objects (e.g. neuron groups, layers, and so on)
//   cannot contain space (including tabs), comma (,), semicoma (;), 
//   dot (.), or double slash (//). Names containing these special 
//   characters will result in undefined behaviours.
//
// 8. The following terms have special meanings, so please do not used for
//   object name: 
//   "neuron", "layer", "group", "global" and "source"
//
// ------------------- set parameter below -------------------------

//------------------------------------------------
// Define global simulation parameters
//  
// 3 parameters are defined here:
//   OUTPUT_TIME: the period of simulation time (not real time) whose 
//     voltage data of neuron groups will be saved to file (msec)
//   RAND_SEED: the seed for random generator (integer, optional)
//   THREAD_NUM: number of thread created by the program (integer, optional)  
//   
//   *****
//   The RAND_SEED parameter is optional, assumed to be zero if not specified.
//   if RAND_SEED = 0, the seed will generated from real time clock (different value for each run)
//   if RAND_SEED > 0, it will be used for random generator seed (the same value for all runs)
//   for statistical analysis, set rand_seed to 0 
//  
//   The OUTPUT_TIME parameter must be set in the format of "BEGIN_TIME:INTERVAL:END_TIME". 
//   For example, 
//     OUTPUT_TIME = {1000:1:2000};
//   will instruct the program to save the voltage data between t=1 sec and t=2 sec
//   at the interval of 1 ms. Multiple output time windows may be specified, like 
//     OUTPUT_TIME = {1000:1:2000, 3000:1:4000};
//   The coma and semicolon is mandatory 
//
//   The THREAD_NUM parameter is optional, assume to be zero if not specified.
//   if THREAD_NUM = 0 the number will be got from omp_get_num_procs(), which is usually equal
//                to the number of available processors/cores in the system. 
//   if THREAD_NUM > 0 the program will run on the sepcified number of threads 
//   if the specified value is greater than the value returned by omp_get_num_procs(), 
//   it will be set to the value returned omp_get_num_procs()
//------------------------------------------------
SIMU {
   OUTPUT_TIME = {9881:1:15000, 24881:1:30000}; 
   RAND_SEED   = 0;
   THREAD_NUM  = 0;
};

//------------------------------------------------
// Define global simulation parameters
//  
// 4 parameters are defined here:
//   SIZE: the size of the simulated cortical region (mm)
//   SIDE_GRID: the number of grid in each side 
//   SIMU_TIME: total evolution time for the simulation (msec)
//   TIME_STEP: the time step size (msec)
//
//------------------------------------------------
//
//the diameter of a cortical millicolumn varies
//acceptable value for cat is 50-70 um 
//   (Feldman and Peter, (1974) Brain Res, 77:56)
//
LCM {
   SIZE = 1.2;         // mm, simulate a 1.2mm x 1.2mm cortical area 
   SIDE_GRID = 20;     // divide the area to 20 x 20 grid
   SIMU_TIME = 30000;  // total simulation time = 20 sec
   TIME_STEP = 0.5;    // msec, time step = 0.5 msec
};

//-----------------------------------------------
// Define cortical layers
//   A list of cortical layers separated using comma(,) 
//   and embraced with a pair of curly brackets({})
//-----------------------------------------------
//Cortical layers L1 L2/3 L4 L5 L6
//TN: Thalamus Nucleis, special layer
LAYER = {L1, L2/3, L4, L5, L6, TN};

//-----------------------------------------------
// Set parameters for each cortical layer
//
// Two parameters are defined for each cortical layer
//   UPPER_BOUND: the upper bound of the cortical layer (mm)
//   LOWER_BOUND: the lower bound of the cortical layer (mm)
//
// Both the parameters need to be set.
//
// The boundary of all cortical layers should not overlap
// but do not need to be adjacent
//
// These parameters are only used to control AP and PSP
// propagation delays
//
// Unit of measurement: millimeters
//-----------------------------------------------
//Data source: Beaulieu and Colonnier, 1983 J.Comp Neurol, 217(3), 337?44.
//
LAYER.L1 {
   UPPER_BOUND = 0;     // mm, the upper bound of the layer
   LOWER_BOUND = 0.166; // mm, the lower bound
};

LAYER.L2/3 {
   UPPER_BOUND = 0.166; // mm
   LOWER_BOUND = 0.631; // mm
};

LAYER.L4 {
   UPPER_BOUND = 0.631; // mm
   LOWER_BOUND = 1.141; // mm
};

LAYER.L5 {
   UPPER_BOUND = 1.141; // mm
   LOWER_BOUND = 1.278; // mm
};

LAYER.L6 {
   UPPER_BOUND = 1.278; // mm
   LOWER_BOUND = 1.622; // mm
};
//the distance from thalamus to cortex is about 20 mm
LAYER.TN {
   UPPER_BOUND = 20.;   // mm
   LOWER_BOUND = 22.;   // mm
};

//-----------------------------------------------
// Define neuron groups
//   A list of neuron groups separated using comma(,)
//   and embraced with a pair of curly brackets({}).
//
//-----------------------------------------------
NEURON = {E1, I1, P2/3, I2/3, P4, SS4, I4, P5, I5, P6, I6, IRTN, PLGN, ILGN};

//-----------------------------------------------
// Set parameters for each neuron group defined above
//
// 10 parameters are defined for each neuron group:
//   LAYER: which layer the neuron group is located
//
//   TYPE: excitatory(EXCIT) or inhibitory(INHIB) neuron
//
//   DENSITY: neuron density (per 1 mm^2 cortex)
//         this parameter is only used to calculate LFP
//
//   V_0: resting membrane potential (mV)
//
//   V_REV: reverse membrane potential (mV)
//
//   SPK_SPEED: spike propagation speed (mm/msec)
//
//   PSP_SPEED: psp propagation speed (mm/msec)
//
//   PSP_DECAY: psp decay factor (mm-1)
//
//   FIRE_GAIN: firing gain (base on mV for membrane potential)
//
//   FIRE_VHMF: voltage at half maximum firing (mV)
//
//   SYNP_SIGMA: the sigma of synapse distribution (mm)
//
//   TAU_MBN: time constant of the membrane (mm)
//
// All the parameter need to be set.
//
// The program will not accept unreasonable parameter value
//-----------------------------------------------

//parameter for all neuron group
NEURON.GLOBAL {
   V_0 = -65;      // mV, Source: Carandini and Ferster 2000 J Neurosci, 20: 470
   SPK_SPEED = 1.0; // mm/msec Source: for example, Swadlow 1994 J Neurophysiol 71:437
   PSP_SPEED = 0.2; // mm/msec Source: Stuart and Sakmann Nature 367: 69 Fig 2
   PSP_DECAY = 1.6; // mm Source: Stuart and Sakmann Nature 367: 69 Fig 1
   TAU_MBN   = 20; //www.neuroelectro.org
};

//excitatory in layer 1
NEURON.E1 {
   LAYER = L1;
   TYPE  = EXCIT;
   V_REV = 0;

   DENSITY = 36;
      
   //source: Hansel and Vreeswijk J Neurosci 22(12): 5118 
   FIRE_GAIN = 0.33; 
   //souce: Hansel and Vreeswijk J Neurosci 22(12): 5118
   //        Priebe et al Nat Neurosci 7(10): 1113
   FIRE_VHMF = -45.;   
               
   //empirical value, consistent with Wright (2009) Neural Netw 22:373
   FIRE_MAX = 100; 

   //the value is 40-60 um in rat (source Song et al Plos Bio 3(10):e350 Fig 3)
   //we assume the value is slightly large in cat, because it has a large visual cortex
   SYNP_SIGMA = 0.08;  //mm
};

//inhibitory neuron in layer 1
NEURON.I1 {
   LAYER = L1;
   TYPE = INHIB;
   V_REV = -70;

   DENSITY = 1177;
   
   //this is set to 2.5 times of the fire gain of pyramidal neuron
   //the firing ability of fast spiking interneuron is proximately 2.5 times of 
   // regular spiking pyramidal neuron
   //source: Nowak et al, J Neurophysiol, 89: 1541.
 
   FIRE_GAIN = 0.33; 
   FIRE_VHMF  = -45.;
   
   //empirical value, consistent with Wright (2009) Neural Netw 22:373
   FIRE_MAX = 200; 
   
   // the value is set to half of the value of pyramidal neuron
   // to account for the notion that inhib neurons usually have more 
   // localised connection 
   SYNP_SIGMA = 0.04; //mm
};

//pyramidal neuron in layer 2/3
NEURON.P2/3 {
   LAYER = L2/3;
   TYPE = EXCIT;
   V_REV = 0;

   DENSITY = 20394;
   
   FIRE_GAIN = 0.33;
   FIRE_VHMF  = -45.;
   FIRE_MAX = 100; 
   
   SYNP_SIGMA = 0.08;
};

//inhibitory neuron in layer 2/3
NEURON.I2/3 {
   LAYER = L2/3;
   TYPE = INHIB;
   V_REV = -70;

   DENSITY = 5726;
   
   FIRE_GAIN = 0.33;
   FIRE_VHMF  = -45.;
   FIRE_MAX = 200; 

   SYNP_SIGMA = 0.04;
};

//spiny stellate neuron in layer 4
NEURON.SS4 {
   LAYER = L4;
   TYPE = EXCIT;
   V_REV = 0;

   DENSITY = 14433;
   
   //the firing capability of SS4 is similar to pyramidal neuron 
   //source: Nowaki et al, J Neurophysiol, 89: 1541-66. 
   FIRE_GAIN = 0.33;
   FIRE_VHMF  = -45.;
   FIRE_MAX = 100; 
   
   // use the same value as inhib interneurons because
   // spiny stellar neuron also have localised connections
   SYNP_SIGMA = 0.04; 
};

//pyramidal neuron in layer 4
NEURON.P4 {
   LAYER = L4;
   TYPE = EXCIT;
   V_REV = 0;

   DENSITY = 7216;
   
   FIRE_GAIN = 0.33;
   FIRE_VHMF  = -45.;
   FIRE_MAX = 100; 

   SYNP_SIGMA = 0.08;
};

//inhibitory neuron in layer 4
NEURON.I4 {
   LAYER = L4;
   TYPE = INHIB;
   V_REV = -70;

   DENSITY = 5412;
   
   FIRE_GAIN = 0.33;
   FIRE_VHMF  = -45.;
   FIRE_MAX = 200; 
   
   SYNP_SIGMA = 0.04;
};

//pyramidal neuron in layer 5
NEURON.P5 {
   LAYER = L5;
   TYPE = EXCIT;
   V_REV = 0;

   DENSITY = 4785;
   
   FIRE_GAIN = 0.33;
   FIRE_VHMF  = -45.;
   FIRE_MAX = 100; 
   
   SYNP_SIGMA = 0.08;
};

//Inhibitory neuron in layer 5
NEURON.I5 {
   LAYER = L5;
   TYPE = INHIB;
   V_REV = -70;

   DENSITY = 1098;
   
   FIRE_GAIN = 0.33;
   FIRE_VHMF  = -45.;
   FIRE_MAX = 200; 

   SYNP_SIGMA = 0.04;
};

//Pyramidal neuron in layer 6
NEURON.P6 {
   LAYER = L6;
   TYPE = EXCIT;
   V_REV = 0;

   DENSITY = 14198;
   
   FIRE_GAIN = 0.33;
   FIRE_VHMF  = -45.;
   FIRE_MAX = 100; 

   SYNP_SIGMA = 0.08;
};

//Inhibitory neuron in layer 6
NEURON.I6 {
   LAYER = L6;
   TYPE = INHIB;
   V_REV = -70;

   DENSITY = 3138;
   
   FIRE_GAIN = 0.33;
   FIRE_VHMF  = -45.;
   FIRE_MAX = 200; 
   
   SYNP_SIGMA = 0.04;
};

//Interneuron in Reticular nucleus of thalamus
NEURON.IRTN {
   LAYER = TN;
   TYPE = INHIB;
   V_REV = -70;

   DENSITY = 1000;

   FIRE_GAIN = 0.33;
   FIRE_VHMF = -45;
   FIRE_MAX = 200;

   SYNP_SIGMA = 0.04;
};

//Thalaimo-cortial relay cell in LGN
NEURON.PLGN {
   LAYER = TN;
   TYPE = EXCIT;
   V_REV = 0;

   DENSITY = 1000;

   FIRE_GAIN = 0.33;
   FIRE_VHMF = -45;
   FIRE_MAX = 100;

   SYNP_SIGMA = 0.08;
};

NEURON.ILGN {
   LAYER = TN;
   TYPE = INHIB;
   V_REV = -70;

   DENSITY = 1000;

   FIRE_GAIN = 0.33;
   FIRE_VHMF = -45;
   FIRE_MAX = 200;

   SYNP_SIGMA = 0.04;
};

//-----------------------------------------------
// Define receptors
//   A list of receptors separate using comma (,)
//   embraced with a pair of curly bracket ({})
//
//-----------------------------------------------
RECEPTOR = {AMPA, NMDA, GABA};

//-----------------------------------------------
// Set parameters for each receptor defined above
//
// 5 parameters are defined for each receptor
//   g0: synaptic gain (mV/(spike/sec) == mV/Hz)
//   lambda: the receptor adaptation factor
//   delay: neurotransmitter diffusion delay
//   alpha and N: parameter for the gamma function 
//           that defines the PSP time course  
//
//   All the 5 parameters need to be set
//-----------------------------------------------

//AMPA
RECEPTOR.AMPA {
   TYPE = EXCIT;
   G0 = 28.00E-6; //synaptic gain for AMPA receptor
   LAMBDA = 0.012;
   DELAY = 0.38;

   // the 10-90% rise time = 2.5 ms
   //width at half-maximum = 15 ms
   //source: Thomson et al (1993) J Neurophysiol 70: 2354
   TAU_RISE = 2.6; // corresponding to rise_time = 1.12
   TAU_FALL = 13;
};

//NMDA
RECEPTOR.NMDA {
   TYPE = EXCIT;
   G0 = 28.00E-6; //synaptic gain for NMDA receptor
   LAMBDA = 0.037;
   DELAY = 0.38; //ms

   //10-90% rise time = 8 ms
   //width at half-maximum = 60 ms
   //source : Hestrin et al 1990 J Physiol 422(1): 203
   TAU_RISE = 6.6; //ms
   TAU_FALL = 60;  //ms 
};

//GABA
RECEPTOR.GABA {
   TYPE = INHIB;
   G0 = -15.00E-6; //synaptic gain for GABA receptor
   LAMBDA = 0.005;
   DELAY = 0.9;

   //10-90% rise time = 2.7 ms
   //width at half-maximum = 15 ms 
   //source: THomson and Deuches 1997 Cerebral Cortex 7(6):510
   TAU_RISE = 3;
   TAU_FALL = 12.5;
};

//-----------------------------------------------
// Defined external spike sources
//   A list of external spike source separate using comma (,)
//   embraced with a pair of curly bracket ({})
//
// A external spike source is a source of afferent spikes
// projecting from external region into the cortical area.
//
// No parameter need to be set for the external source.
// The synaptic connection is defined in a separate section.
//
//-----------------------------------------------
SOURCE = {CC, SI}; 
//CC is the spikes projecting from other cortical regions
//SI is the sensory input to the LGN

//-----------------------------------------------
// Defined the external stimulator,
//   A list of stimulators separate using comma (,)
//   embraced with a pair of curly bracket ({})
//
// A stimulator is a spike generator that attached to 
// a external source spike source 
//
//-----------------------------------------------
//background spontaneous input or visual stimulation, separated using ',', don't use quotes
STIM = {NOISE, NOSTIM, VISUAL};


//-----------------------------------------------
// Set parameters for each stimulator defined above
//
// Currently, three types of stimulators are implemented
//
// 1. mode=0: a low-frequency unsynchronised white noise
//   This type of stimulator generates white-noise shape spike rates,
//   and the spike rates projecting to all elements are independent, i.e 
//   each element has its own stimulator with the same parameter values
//   and different random number sequence.
//
//   paramters:
//     amplitude: stimulation amplitude, see below (spike/sec)
//     period: low-pass filter window size (sec)
//      the filtering operation is 
//         y(idx) = r*x + (1-r)*y(idx-1)
//      where "y(idx-1)" and "y(idx)" are the generated value at the 
//      last step and this step, respectively; and x is a gaussian random 
//      number generated with mean = 0 and sigma = "amplitude", 
//      the "amplitude" is the parameter mentioned above;
//      "r" is a parameter controlling the cutoff frequency, and its value
//      is calculated via
//         r = "time_step"/"period"
//      
//      the output spike rate of the stimulator is determined by 
//         output = y(idx) if y(idx)>=0, 
//               = 0     if y(idx)<0
//
// 2. mode=1: a recurent Gaussian peaks
//   This type of stimulator generates spike rates with recurrent
//   Gaussian shape. The spike rates projecting to all elements are synchronized, i.e
//   they are the same at a time.
//   
//   parameter
//     amplitude: amplitude of spike rates (spike/sec)
//      default value : st_period/12.0;
//     period: period of the spike rates (sec)
//
//
// 3. mode=2: a low-frequency synchronised white noise
//   Similar to the mode 0, but the spike rates projecting to all elements are synchronised.
//
//  other parameters:
//   st_stop and st_stop: the time points when the stimulator starts and stops
//   source: name of external source that the stimulator is attached to
//   elements: elements that the stimulator projects to
//--------------------------------------------------

//parameter for all stimulators
STIM.GLOBAL {
   ELEMENT = {0-399}; //applied to all columns
   UPDATE_INTERVAL = 5; //msec
};

//background noise from corti-cortical area
STIM.NOISE {
   MODE      = 0;
   SOURCE    = CC;
   AMPLITUDE = 1.;
   PERIOD = 50.;   // msec, low pass filter window size
   START  = 0;     // msec
   STOP   = 30000; // msec
};

//general background input without specific stimulation
STIM.NOSTIM {
   MODE      = 2;
   SOURCE    = SI;
   AMPLITUDE = 1.;
   PERIOD = 50.;   // msec
   START  = 0;     // msec
   STOP   = 15000; // msec
};

//visual stimulation
STIM.VISUAL {
   MODE      = 2;
   SOURCE    = SI;
   AMPLITUDE = 50.;
   PERIOD = 20.;   // msec
   START  = 15000; // msec
   STOP   = 30000; // msec
};

//--------------------------------------------------
// define synaptic connections
//
// Please use the following format:
// synapse.presynp.postsynp.ly = num; 
//   which specify the synapse number in layer "ly" 
//     projecting from neuron "presyn" to neuron "postsynp"
// or
// synapse.presynp.postsynp = {num_for_first_layer, num_for_second_layer, ...};
//   which specify the synaptic number from presynp to postsynp in all layers 
//--------------------------------------------------
// most of the synaptic numbers were driven from 
//     Izhikevich and Edelman 2008 PNAS 105:3593 (Figure 9)
// and Binzegger Douglas and Martin 2009 J Neurosci 24: 8441 (Figure 7 & 8)
SYNAPSE {
    E1.E1.L1 = 907;
    I1.E1.L1 = 1600;
    P2/3.E1.L1 = 907;
    I2/3.E1.L1 = 160;
    PLGN.E1.L1 = 408;
    CC.E1.L1 = 7752;

    E1.I1.L1 = 73;
    I1.I1.L1 = 898;
    P2/3.I1.L1 = 560;
    I2/3.I1.L1 = 151;
    //P4.I1.L1 = 9;
    //P5.I1.L1 = 9;
    PLGN.I1.L1 = 364;
    CC.I1.L1 = 6899;

    I1.P2/3.L1 = 133;
    P2/3.P2/3.L1 = 82;
    I2/3.P2/3.L1 = 16;
    //P4.P2/3.L1 = 1;
    //P5.P2/3.L1 = 1;
    PLGN.P2/3.L1 = 54;
    CC.P2/3.L1 = 1019;
    P2/3.P2/3.L2/3 = 3474;
    I2/3.P2/3.L2/3 = 783;
    P4.P2/3.L2/3 = 447;
    SS4.P2/3.L2/3 = 435;
    I4.P2/3.L2/3 = 46;
    P5.P2/3.L2/3 = 429;
    P6.P2/3.L2/3 = 133;
    I6.P2/3.L2/3 = 46;

    I1.I2/3.L2/3 = 54;
    P2/3.I2/3.L2/3 = 1769;
    I2/3.I2/3.L2/3 = 509;
    P4.I2/3.L2/3 = 226;
    SS4.I2/3.L2/3 = 217;
    I4.I2/3.L2/3 = 28;
    P5.I2/3.L2/3 = 215;
    P6.I2/3.L2/3 = 69;
    I6.I2/3.L2/3 = 23;
    PLGN.I2/3.L2/3 = 22;
    CC.I2/3.L2/3 = 408;

    I1.P4.L1 = 82;
    P2/3.P4.L1 = 51;
    I2/3.P4.L1 = 10;
    //P4.P4.L1 = 1;
    //P5.P4.L1 = 1;
    PLGN.P4.L1 = 33;
    CC.P4.L1 = 629;
    P2/3.P4.L2/3 = 546;
    I2/3.P4.L2/3 = 80;
    P4.P4.L2/3 = 70;
    SS4.P4.L2/3 = 68;
    //I4.P4.L2/3 = 5;
    P5.P4.L2/3 = 68;
    P6.P4.L2/3 = 22;
    //I6.P4.L2/3 = 7;
    P2/3.P4.L4 = 216;
    I2/3.P4.L4 = 40;
    P4.P4.L4 = 211;
    SS4.P4.L4 = 760;
    I4.P4.L4 = 468;
    P5.P4.L4 = 65;
    P6.P4.L4 = 1585;
    I6.P4.L4 = 297;
    PLGN.P4.L4 = 151;
    CC.P4.L4 = 1233;

    P2/3.SS4.L4 = 218;
    I2/3.SS4.L4 = 53;
    P4.SS4.L4 = 226;
    SS4.SS4.L4 = 828;
    I4.SS4.L4 = 496;
    P5.SS4.L4 = 56;
    P6.SS4.L4 = 1723;
    I6.SS4.L4 = 305;
    PLGN.SS4.L4 = 162;
    CC.SS4.L4 = 1329;

    P2/3.I4.L4 = 168;
    I2/3.I4.L4 = 39;
    P4.I4.L4 = 138;
    SS4.I4.L4 = 497;
    I4.I4.L4 = 357;
    P5.I4.L4 = 35;
    P6.I4.L4 = 1024;
    I6.I4.L4 = 182;
    PLGN.I4.L4 = 95;
    CC.I4.L4 = 789;

    I1.P5.L1 = 138;
    P2/3.P5.L1 = 85;
    I2/3.P5.L1 = 16;
    //P4.P5.L1 = 1;
    //P5.P5.L1 = 1;
    PLGN.P5.L1 = 55;
    CC.P5.L1 = 1054;
    P2/3.P5.L2/3 = 388;
    I2/3.P5.L2/3 = 57;
    P4.P5.L2/3 = 50;
    SS4.P5.L2/3 = 48;
    //I4.P5.L2/3 = 4;
    P5.P5.L2/3 = 48;
    P6.P5.L2/3 = 15;
    //I6.P5.L2/3 = 5;
    P2/3.P5.L4 = 12;
    //I2/3.P5.L4 = 3;
    P4.P5.L4 = 18;
    SS4.P5.L4 = 68;
    I4.P5.L4 = 28;
    //P5.P5.L4 = 4;
    P6.P5.L4 = 143;
    I6.P5.L4 = 25;
    PLGN.P5.L4 = 14;
    CC.P5.L4 = 110;
    P2/3.P5.L5 = 2040;
    I2/3.P5.L5 = 92;
    P4.P5.L5 = 334;
    SS4.P5.L5 = 237;
    I4.P5.L5 = 39;
    P5.P5.L5 = 567;
    I5.P5.L5 = 85;
    P6.P5.L5 = 202;
    I6.P5.L5 = 517;
    PLGN.P5.L5 = 25;
    CC.P5.L5 = 345;

    P2/3.I5.L5 = 1356;
    I2/3.I5.L5 = 75;
    P4.I5.L5 = 224;
    SS4.I5.L5 = 158;
    I4.I5.L5 = 33;
    P5.I5.L5 = 376;
    I5.I5.L5 = 66;
    P6.I5.L5 = 128;
    I6.I5.L5 = 340;
    PLGN.I5.L5 = 15;
    CC.I5.L5 = 215;

    //I1.P6.L1 = 6;
    //P2/3.P6.L1 = 4;
    //I2/3.P6.L1 = 1;
    //PLGN.P6.L1 = 3;
    CC.P6.L1 = 48;
    P2/3.P6.L2/3 = 102;
    I2/3.P6.L2/3 = 15;
    P4.P6.L2/3 = 13;
    SS4.P6.L2/3 = 13;
    //I4.P6.L2/3 = 1;
    P5.P6.L2/3 = 13;
    //P6.P6.L2/3 = 4;
    //I6.P6.L2/3 = 1;
    P2/3.P6.L4 = 42;
    I2/3.P6.L4 = 12;
    P4.P6.L4 = 63;
    SS4.P6.L4 = 240;
    I4.P6.L4 = 100;
    P5.P6.L4 = 13;
    P6.P6.L4 = 505;
    I6.P6.L4 = 88;
    PLGN.P6.L4 = 48;
    CC.P6.L4 = 390;
    P2/3.P6.L5 = 405;
    I2/3.P6.L5 = 10;
    P4.P6.L5 = 67;
    SS4.P6.L5 = 48;
    //I4.P6.L5 = 5;
    P5.P6.L5 = 112;
    I5.P6.L5 = 12;
    P6.P6.L5 = 38;
    I6.P6.L5 = 101;
    //PLGN.P6.L5 = 4;
    CC.P6.L5 = 64;
    P2/3.P6.L6 = 96;
    //I2/3.P6.L6 = 8;
    P4.P6.L6 = 50;
    SS4.P6.L6 = 61;
    //I4.P6.L6 = 4;
    P5.P6.L6 = 192;
    I5.P6.L6 = 12;
    P6.P6.L6 = 552;
    I6.P6.L6 = 593;
    PLGN.P6.L6 = 134;
    CC.P6.L6 = 2137;

    P2/3.I6.L5 = 1356;
    I2/3.I6.L5 = 75;
    P4.I6.L5 = 224;
    SS4.I6.L5 = 158;
    I4.I6.L5 = 33;
    P5.I6.L5 = 376;
    I5.I6.L5 = 66;
    P6.I6.L5 = 128;
    I6.I6.L5 = 340;
    PLGN.I6.L5 = 15;
    CC.I6.L5 = 215;
    P2/3.I6.L6 = 81;
    //I2/3.I6.L6 = 6;
    P4.I6.L6 = 42;
    SS4.I6.L6 = 52;
    //I4.I6.L6 = 3;
    P5.I6.L6 = 161;
    I5.I6.L6 = 13;
    P6.I6.L6 = 464;
    I6.I6.L6 = 496;
    PLGN.I6.L6 = 113;
    CC.I6.L6 = 1794;

    P6.IRTN.TN = 1200;
    IRTN.IRTN.TN = 400;
    PLGN.IRTN.TN = 800;

    P5.PLGN.TN = 712;
    P6.PLGN.TN = 884;
    IRTN.PLGN.TN = 1036;
    PLGN.PLGN.TN = 284;
    ILGN.PLGN.TN = 200;
    SI.PLGN.TN = 284;

    P5.ILGN.TN = 222;
    P6.ILGN.TN = 278;
    PLGN.ILGN.TN = 15;
    ILGN.ILGN.TN = 732;
    SI.ILGN.TN = 1461;
};

//end of parameter configuration file


